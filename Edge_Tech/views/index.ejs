<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat with Gemini AI</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="w-screen h-screen flex flex-col justify-between bg-gradient-to-br from-gray-900 via-purple-900 to-blue-900 text-white">

    <!-- Navbar -->
    <nav class="backdrop-blur-lg bg-white/10 shadow-lg p-4 fixed top-0 left-0 w-full z-50">
        <div class="max-w-6xl mx-auto flex justify-between items-center">
            <a href="/" class="text-white text-2xl font-bold tracking-wide flex items-center">
                <span class="mr-2">üí¨</span> Gemini Chat
            </a>
            <ul class="flex space-x-6">
                <li><a href="/api/chat" class="text-gray-300 hover:text-white transition duration-300">Home</a></li>
                <li><a href="/api/about" class="text-gray-300 hover:text-white transition duration-300">About</a></li>
            </ul>
        </div>
    </nav>

    <!-- Chat Container -->
    <div class="flex flex-col h-full w-full max-w-4xl mx-auto bg-gray-800 shadow-2xl rounded-lg overflow-hidden mt-20">

        <!-- Header -->
        <header class="bg-gradient-to-r from-indigo-700 to-purple-700 text-white text-center py-4 text-2xl font-bold">
            üí¨ Chat with Gemini AI
        </header>

        <!-- Chat Messages -->
        <div id="chatBox" class="flex-1 overflow-y-auto p-6 space-y-4 bg-gray-900">
            <p class="text-gray-400 text-center">Start the conversation...</p>
        </div>

        <!-- Message Input -->
        <form id="chatForm" class="relative flex items-center p-4 bg-gray-800 border-t border-gray-700">
            <input type="text" id="message" name="message" required 
                class="border border-gray-600 bg-gray-700 text-white rounded-full p-4 w-full pr-16 text-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                placeholder="Type your message...">
    
            <button type="submit" 
                class="absolute right-6 bg-indigo-600 text-white p-3 rounded-full hover:bg-indigo-700 transition duration-300 shadow-lg">
                ‚¨Ü
            </button>
        </form>


        <div class="flex justify-center mb-4">
            <button id="clearChat" class="bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-300 flex items-center gap-2">
                üóëÔ∏è Clear Chat
            </button>
        </div>
        

    </div>
   
    
    <script>
        document.addEventListener("DOMContentLoaded", async function () {
            let sessionId = localStorage.getItem("sessionId") || generateSessionId();
            localStorage.setItem("sessionId", sessionId);
        
            const chatBox = document.getElementById("chatBox");
        
            // ‚úÖ Fetch chat history when the page loads
            try {
                const historyResponse = await fetch(`/api/chat/${sessionId}`);
                const history = await historyResponse.json();
        
                if (history.length > 0) {
                    history.forEach(chat => {
                        chatBox.innerHTML += `
                            <div class="bg-indigo-600 text-white p-3 rounded-lg w-fit max-w-lg ml-auto mb-2 shadow-md">
                                ${chat.userMessage}
                            </div>
                            <div class="bg-gray-700 text-gray-200 p-4 rounded-lg w-full mb-2 shadow-md">
                                <pre class="whitespace-pre-wrap">${chat.botResponse}</pre>
                            </div>
                        `;
                    });
                    chatBox.scrollTop = chatBox.scrollHeight;
                }
            } catch (error) {
                console.error("‚ùå Error fetching chat history:", error);
            }
        
            // ‚úÖ Handle new messages
            document.getElementById("chatForm").addEventListener("submit", async function (event) {
                event.preventDefault();
                
                const messageInput = document.getElementById("message");
                const message = messageInput.value.trim();
                
                if (!message) return;
        
                // ‚úÖ Display User Message
                chatBox.innerHTML += `<div class="bg-indigo-600 text-white p-3 rounded-lg w-fit max-w-lg ml-auto mb-2 shadow-md">${message}</div>`;
                chatBox.scrollTop = chatBox.scrollHeight;
                messageInput.value = "";
        
                // ‚úÖ Show Loading Indicator
                const loadingMessage = document.createElement("div");
                loadingMessage.className = "bg-gray-700 text-gray-200 p-4 rounded-lg w-full mb-2 shadow-md";
                loadingMessage.innerHTML = `<pre>ü§ñ AI is thinking...</pre>`;
                chatBox.appendChild(loadingMessage);
                chatBox.scrollTop = chatBox.scrollHeight;
        
                try {
                    const response = await fetch("/api/chat", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ message, sessionId })
                    });
        
                    const data = await response.json();
                    
                    // ‚úÖ Remove Loading Indicator & Show AI Response
                    chatBox.removeChild(loadingMessage);
                    chatBox.innerHTML += `
                        <div class="bg-gray-700 text-gray-200 p-6 rounded-lg w-full mb-2 shadow-md">
                            <pre class="whitespace-pre-wrap">${data.response || "‚ùå Error fetching response"}</pre>
                        </div>
                    `;
                    chatBox.scrollTop = chatBox.scrollHeight;
                } catch (error) {
                    console.error("‚ùå Fetch Error:", error);
                    chatBox.removeChild(loadingMessage);
                    chatBox.innerHTML += `<div class="bg-red-500 text-white p-3 rounded-lg w-full mb-2 shadow-md">‚ùå Failed to get AI response.</div>`;
                }
            });
        });
        
        // ‚úÖ Function to Generate Unique Session ID
        function generateSessionId() {
            return "sess-" + Math.random().toString(36).substr(2, 9);
        }
        
        // ‚úÖ Clear Chat Button
        document.getElementById("clearChat").addEventListener("click", async function () {
            let sessionId = localStorage.getItem("sessionId");
        
            const confirmClear = confirm("Are you sure you want to delete the chat history?");
            if (!confirmClear) return;
        
            await fetch(`/api/chat/clear/${sessionId}`, { method: "DELETE" });
        
            document.getElementById("chatBox").innerHTML = "<p class='text-gray-400 text-center'>Chat cleared.</p>";
        });
        
        
        
    </script>
    
    
    

</body>
</html>